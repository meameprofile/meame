// pnpm tsx scripts/run-with-env.ts scripts/supabase/schema-rls.ts
/**
 * @file schema-rls.ts
 * @description Guardi√°n de Seguridad para las pol√≠ticas RLS de Supabase.
 *              Realiza una auditor√≠a completa de todas las reglas de seguridad
 *              a nivel de fila y genera un informe de diagn√≥stico.
 * @version 1.0.0 (Granular & AI-Consumable Reports)
 * @author L.I.A. Legacy
 */
import { promises as fs } from "fs";
import * as path from "path";
import { z } from "zod";
import { createScriptClient } from "../_utils/supabaseClient";
import { scriptLogger } from "../_utils/logger";
import type { ScriptActionResult } from "../_utils/types";

// --- SSoT de Contratos de Datos ---
const RlsPolicySchema = z.object({
  table: z.string(),
  policy_name: z.string(),
  command: z.string(),
  definition: z.string().nullable(),
});
type RlsPolicy = z.infer<typeof RlsPolicySchema>;

const SystemDiagnosticsSchema = z.object({
  rls_policies: z.array(RlsPolicySchema),
});

interface Report {
  reportMetadata: {
    script: string;
    purpose: string;
    generatedAt: string;
  };
  instructionsForAI: string[];
  auditStatus: "SUCCESS" | "FAILED";
  schemaDetails: {
    rls_policies: RlsPolicy[];
  };
  summary: string;
}

async function diagnoseRlsSchema(): Promise<ScriptActionResult<string>> {
  const traceId = scriptLogger.startTrace(`diagnoseSchema:rls`);
  scriptLogger.startGroup(
    `üõ°Ô∏è  Auditando Pol√≠ticas de Seguridad (RLS) de la Base de Datos...`
  );

  const reportDir = path.resolve(process.cwd(), "reports", "supabase");
  const reportPath = path.resolve(reportDir, `schema-rls.json`);

  const report: Report = {
    reportMetadata: {
      script: `scripts/supabase/schema-rls.ts`,
      purpose:
        "Diagn√≥stico de todas las pol√≠ticas de Seguridad a Nivel de Fila (RLS).",
      generatedAt: new Date().toISOString(),
    },
    instructionsForAI: [
      "Este es un informe de diagn√≥stico de seguridad que detalla TODAS las pol√≠ticas RLS activas en la base de datos.",
      "Para cada pol√≠tica, analiza la 'table', el 'command' (SELECT, INSERT, UPDATE, DELETE) y la 'definition'.",
      "La 'definition' es la L√ìGICA DE LA REGLA. Es CR√çTICO verificar que las pol√≠ticas de escritura (INSERT, UPDATE, DELETE) siempre contengan una cl√°usula de autorizaci√≥n (ej. `auth.uid() = user_id` o `is_workspace_member(...)`).",
      "Una 'definition' con valor 'true' para SELECT en tablas p√∫blicas es aceptable, pero para escritura es una VULNERABILIDAD CR√çTICA.",
      "Una 'definition' con valor `null` para INSERT en `razprompts_entries` es la VULNERABILIDAD que se necesita confirmar y corregir.",
      "El 'summary' ofrece una conclusi√≥n general de la auditor√≠a de seguridad.",
    ],
    auditStatus: "FAILED",
    schemaDetails: { rls_policies: [] },
    summary: "",
  };

  try {
    const supabase = createScriptClient();
    scriptLogger.info(`Invocando RPC 'get_system_diagnostics'...`);

    const { data, error } = await supabase.rpc("get_system_diagnostics");
    if (error)
      throw new Error(
        `Fallo en RPC 'get_system_diagnostics': ${error.message}`
      );

    const validation = SystemDiagnosticsSchema.safeParse(data);
    if (!validation.success) {
      throw new Error(
        `Los datos de la RPC 'get_system_diagnostics' no cumplen con el schema esperado.`
      );
    }
    const diagnosticsData = validation.data;
    scriptLogger.traceEvent(
      traceId,
      "Datos de diagn√≥stico del sistema obtenidos y validados."
    );

    report.schemaDetails.rls_policies = diagnosticsData.rls_policies || [];

    if (report.schemaDetails.rls_policies.length === 0) {
      scriptLogger.warn(
        "¬°ALERTA DE SEGURIDAD! No se encontraron pol√≠ticas RLS. Tus datos podr√≠an estar expuestos."
      );
    }

    scriptLogger.info("--- Pol√≠ticas de Seguridad a Nivel de Fila (RLS) ---");
    console.table(report.schemaDetails.rls_policies);

    report.auditStatus = "SUCCESS";
    report.summary = `Auditor√≠a RLS completada. Se encontraron ${report.schemaDetails.rls_policies.length} pol√≠ticas.`;
    scriptLogger.success(report.summary);
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : "Error desconocido.";
    report.summary = `Auditor√≠a RLS fallida: ${errorMessage}`;
    scriptLogger.error(report.summary, { traceId });
  } finally {
    await fs.mkdir(reportDir, { recursive: true });
    await fs.writeFile(reportPath, JSON.stringify(report, null, 2));
    scriptLogger.info(
      `Informe de diagn√≥stico guardado en: ${path.relative(process.cwd(), reportPath)}`
    );
    scriptLogger.endGroup();
    scriptLogger.endTrace(traceId);
    if (report.auditStatus === "FAILED") process.exit(1);
  }

  const success = report.auditStatus === "SUCCESS";
  if (success) {
    return { success: true, data: report.summary };
  } else {
    return { success: false, error: report.summary };
  }
}

diagnoseRlsSchema();
